# Webgrafia
#http://www.chelintutorials.blogspot.com.co/p/descargas.html
#https://www.youtube.com/watch?v=bxibfL4TjWo
#http://stackoverflow.com/questions/14354171/add-scrolling-to-a-platformer-in-pygame
#http://programarcadegames.com/python_examples/f.php?file=timer.py&lang=es
#http://www.loserjuegos.com.ar/referencia/articulos/menu
#LA FUENTE USADA EN EL JUEGO SE PUEDE ENCONTRAR EN http://www.dafont.com/es/halo.font

import pygame
from pygame import *
from random import *

WIN_WIDTH = 800
WIN_HEIGHT = 670
HALF_WIDTH = int(WIN_WIDTH / 2)
HALF_HEIGHT = int(WIN_HEIGHT / 2)

DISPLAY = (WIN_WIDTH, WIN_HEIGHT)
# -*- coding: utf-8 -*-

import random
import pygame
from pygame.locals import *
#--------------OBJECTS CLASS----------------
class Entity(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

#------------------PLAYER-----------------
class Player(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.x = x
        self.y = y
        self.xvel = 0
        self.yvel = 0
        self.onGround = False
        self.image = pygame.image.load("mc1.gif") #Surface((32,32))
        self.i2 = pygame.image.load("mc2.gif")
        self.i4 = pygame.image.load("mc4.gif")
        self.i3 = pygame.image.load("mc3.gif")
        self.i5 = pygame.image.load("mcj.gif")
        self.imagenes=[[self.image,self.i2],[self.i3,self.i4]]
        #self.image.fill(Color("#0000FF"))
        self.image.convert()
        self.rect = Rect(x, y, 32, 32)
        self.direccion =0       # 0 = der // 1=izq // 2=salto
        self.gravOn = True
        
    #def animation(self,temp):
         #-----------------------------------------------

    def update(self, up, down, left, right, platforms, ladders):
        if up:
            # only jump if on the ground
            if self.onGround: self.yvel -= 10
        if down:
            pass
        if left:
            self.xvel = -4
        if right:
            self.xvel = 4
        if not(left or right):
            self.xvel = 0
        # increment in x direction
        self.rect.left += self.xvel
        # do x-axis collisions
        self.collide(self.xvel, 0, platforms)
        # increment in y direction
        self.rect.top += self.yvel
        # assuming we're in the air
        self.onGround = False;
        # do y-axis collisions
        self.collide(0, self.yvel, platforms)
        if self.gravOn == True:
            self.gravity(.6)
        self.laddcollide(ladders)
        
    def gravity(self, grav):
        if self.yvel ==0:
            self.yvel += grav
        else:
            self.yvel += grav
        
    def collide(self, xvel, yvel, platforms):
        for p in platforms:
            if pygame.sprite.collide_rect(self, p):
                if xvel > 0:
                    self.rect.right = p.rect.left
                    self.gravOn = False
                if xvel < 0:
                    self.rect.left = p.rect.right
                    self.gravOn = False
                if yvel > 0:
                    self.rect.bottom = p.rect.top
                    self.onGround = True
                    self.yvel = 0
                    #self.gravOn = False
                if yvel < 0:
                    self.rect.top = p.rect.bottom
                    #self.gravOn = False
    def laddcollide(self, ladders):
        if pygame.sprite.spritecollide(self, ladders, False):
            self.gravOn = False
        if not  pygame.sprite.spritecollide(self, ladders, False):
            self.gravOn = True

#------------------GRENADE------------------
            
class Grenade(Entity, pygame.sprite.Sprite):
    def __init__(self,x ,y):
        Entity.__init__(self)
        pygame.sprite.Sprite.__init__(self)
        self.imagen = pygame.image.load("ball.png")
        self.rect= Rect(x, y, 20, 20)

        self.vel = 4
        self.rect.left = x
        self.rect.top = y

        self.moveX=0
        self.moy=0

    def collision(self,ob = pygame.sprite.Group()):
        self.gravity(2)
        
        list_collide =pygame.sprite.spritecollide(self,ob,False)

        for platform in list_collide:
            if self.moveX > 0:
                #direccion derecha
                self.rect.right = platform.rect.left
            elif self.moveX < 0:
                #direccion izquierda
                self.rect.left = platform.rect.right

        list_collide=pygame.sprite.spritecollide(self,ob,False)

        for platform in list_collide:
            if self.rect.y > 0:
                #direccion arriba
                self.rect.bottom = platform.rect.top
                self.vsvel =0
            elif self.rect.y < 0:
                #direccion abajo
                self.rect.top = platform.rect.bottom
                self.vsvel = 0
    def movement(self):
        if 50 < self.rect.top < 128:
            self.rect.left += 1
        if 160 < self.rect.top < 224:
            self.rect.left -=1
        elif 256 < self.rect.top < 320:
            self.rect.left += 1
        elif 352 < self.rect.top < 416:
            self.rect.left -= 1
        elif 448 < self.rect.top < 512:
            self.rect.left += 1
        elif 544 < self.rect.top < 608:
            self.rect.left -= 1
        elif 640 < self.rect.top < 672:
            self.rect.left += 1
                
    def gravity(self, stop):
        if self.rect.top == 0:
            self.rect.top += stop
        else:
            self.rect.top += stop

    def draw(self,screen):
        screen.blit(self.imagen,self.rect)

#------------------PLATFORMS------------------

class Platform(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = pygame.image.load("Stone.png") #Surface((32, 32))
        self.image.convert()
        #self.image.fill(Color("#DDDDDD"))
        self.rect = Rect(x, y, 32, 32)

    def update(self):
        pass

#---------------LADDERS-----------

class Ladder(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = pygame.image.load("ladd1.png")#Surface((32,32))
        self.image.convert()
        #self.image.fill(Color("#FFFFFF"))
        self.rect = Rect(x, y, 32, 32)
        
class LadBroken(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = pygame.image.load("ladd2.png")#Surface((32,32))
        self.image.convert()
        #self.image.fill(Color("#FFFFFF"))
        self.rect = Rect(x, y, 32, 32)

#------------------ENEMY----------------

class Enemy(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = pygame.image.load("ene.png")#Surface((45,45))
        self.image.convert
        #self.image.fill(Color("#FFFFFF"))
        self.rect = Rect(x, y, 45, 45)

#-------------OBJECTIVE----------------------
class Objective(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = pygame.image.load("reclaimer1.png")#Surface((45,45))
        self.image.convert
        #self.image.fill(Color("#FFFFFF"))
        self.rect = Rect(x, y, 54, 50)
        
####################################################################
####################################################################

pygame.init()

class Opcion:

    def __init__(self, fuente, titulo, x, y, paridad, funcion_asignada):
        self.imagen_normal = fuente.render(titulo, 1, (0, 0, 0))
        self.imagen_destacada = fuente.render(titulo, 1, (200, 0, 0))
        self.image = self.imagen_normal
        self.rect = self.image.get_rect()
        self.rect.x = 500 * paridad
        self.rect.y = y
        self.funcion_asignada = funcion_asignada
        self.x = float(self.rect.x)

    def actualizar(self):
        destino_x = 105
        self.x += (destino_x - self.x) / 5.0
        self.rect.x = int(self.x)

    def imprimir(self, screen):
        screen.blit(self.image, self.rect)

    def destacar(self, estado):
        if estado:
            self.image = self.imagen_destacada
        else:
            self.image = self.imagen_normal

    def activar(self):
        self.funcion_asignada()

class Cursor:

    def __init__(self, x, y, dy):
        self.image = pygame.image.load('cursor.png').convert_alpha()
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.y_inicial = y
        self.dy = dy
        self.y = 0
        self.seleccionar(0)

    def actualizar(self):
        self.y += (self.to_y - self.y) / 10.0
        self.rect.y = int(self.y)

    def seleccionar(self, indice):
        self.to_y = self.y_inicial + indice * self.dy

    def imprimir(self, screen):
        screen.blit(self.image, self.rect)

class Menu:
    "Representa un menú con opciones para un juego"
    
    def __init__(self, opciones):
        self.opciones = []
        pygame.mixer.music.load("htheme.wav")
        pygame.mixer.music.play(-1)
        fuente = pygame.font.Font('halo.ttf', 30)
        x = 105
        y = 180
        paridad = 1

        self.cursor = Cursor(x - 30, y, 30)

        for titulo, funcion in opciones:
            self.opciones.append(Opcion(fuente, titulo, x, y, paridad, funcion))
            y += 30
            if paridad == 1:
                paridad = -1
            else:
                paridad = 1

        self.seleccionado = 0
        self.total = len(self.opciones)
        self.mantiene_pulsado = False

    def actualizar(self):
        """Altera el valor de 'self.seleccionado' con los direccionales."""

        k = pygame.key.get_pressed()

        if not self.mantiene_pulsado:
            if k[K_UP]:
                self.seleccionado -= 1
            elif k[K_DOWN]:
                self.seleccionado += 1
            elif k[K_RETURN]:
                # Invoca a la función asociada a la opción.
                self.opciones[self.seleccionado].activar()

        # procura que el cursor esté entre las opciones permitidas
        if self.seleccionado < 0:
            self.seleccionado = 0
        elif self.seleccionado > self.total - 1:
            self.seleccionado = self.total - 1
        
        self.cursor.seleccionar(self.seleccionado)

        # indica si el usuario mantiene pulsada alguna tecla.
        self.mantiene_pulsado = k[K_UP] or k[K_DOWN] or k[K_RETURN]

        self.cursor.actualizar()
     
        for o in self.opciones:
            o.actualizar()

    def imprimir(self, screen):
        """Imprime sobre 'screen' el texto de cada opción del menú."""

        self.cursor.imprimir(screen)

        for opcion in self.opciones:
            opcion.imprimir(screen)

def comenzar_nuevo_juego():
    
############################## INICIO MAIN 1#####################################
    def main():
        
        screen = pygame.display.set_mode(DISPLAY)
        pygame.display.set_caption("Donkey Kong: HALO Edition")
        timer = pygame.time.Clock()
        pygame.mixer.music.load("h8bitperil.wav")
        pygame.mixer.music.play(1)
        pygame.mixer.music.set_volume(0.3)
        Yellow= (255,239,3)
        Black = (0,0,0)
        White = (255,255,255)

        numFPS = 0
        FPS = 60
        start  =150
        font = pygame.font.Font(None,25)                                #tx font and size

        tm = 0
        #------Name input-------
        #nameout = (input("Player name: "))
        #-----------------------------

        #--------GameOver txt---------------
        font2 = pygame.font.Font("halo.ttf",80)
        font3 = pygame.font.Font("halo.ttf",30)
        life = 1
        endgame = False
        nextl = False
        #------------------------------------------
        

        up = down = left = right = False
        bg = Surface((32,32))
        bg.convert()
        bg.fill(Color("#000000"))
        entities = pygame.sprite.Group()
        player = Player(700, 640)
        
        
        enemy = Enemy(50, 48)
        obj = Objective(340, 28)
        grenades =pygame.sprite.Group()
        objeC = pygame.sprite.Group()
        platforms = []
        ladders = []

        x = y = 0
        level = [ 
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "pppppppppppppppppdppeeeep",  #1----
                  "peeeeeceeeeeeeeeedeeeeeep",
                  "peeeeeeeeeeeeeeeedeeeeeep",
                  "peeepppppdppppppppppppppp",  #2----
                  "peeeeeeeedeeeeeeeeeeeeeep",
                  "peeeeeeeedeeeeeeeeeeeeeep",
                  "ppppppppppppppdppppeeeeep",  #3----
                  "peeeeeeceeeeeedeeeeeeeeep",
                  "peeeeeeeeeeeeedeeeeeeeeep",
                  "peeeepppppdpppppppppppppp",  #4----
                  "peeeeeeeeedeeeeeeceeeeeep",
                  "peeeeeeeeedeeeeeeeeeeeeep",
                  "pppppppppppppdpppppeeeeep",  #5----
                  "peeeeeeeeeeeeedeeeeeeeeep",
                  "peeeeeeeeeeeeedeeeeeeeeep",  
                  "peeepppdppppppppppppppppp",  #6----
                  "peeeeeedeeeeeeeeeceeeeeep",
                  "peeeeeedeeeeeeeeeeeeeeeep",
                  "ppppppppppppppppppppppppp",  #Base
            ]
        #----------------Level builder-----------------
        for row in level:
            for col in row:
                if col == "p":
                    p = Platform(x, y)
                    platforms.append(p)
                    entities.add(p)
                if col == 'd':
                    d = Ladder(x, y)
                    ladders.append(d)
                    entities.add(d)
                if col == 'c':
                    c = LadBroken(x, y)
                    entities.add(c)
                x += 32
            y += 32
            x = 0
        #---------------------------------------------------

        entities.add(player, enemy, obj)
        
        time = 0
                
        while 1:
            timer.tick(60)
            lefter = True
            righter = True
            for e in pygame.event.get():
                if e.type == QUIT: pygame.quit()
                if e.type == KEYDOWN and e.key == K_UP:
                    up = True
                if e.type == KEYDOWN and e.key == K_DOWN:
                    down = True
                if e.type == KEYDOWN and e.key == K_LEFT:
                    left = True
                if e.type == KEYDOWN and e.key == K_RIGHT:
                    right = True
                #if e.type == KEYDOWN and e.key == K_SPACE:
                    

                if e.type == KEYUP and e.key == K_UP:
                    up = False
                if e.type == KEYUP and e.key == K_DOWN:
                    down = False
                if e.type == KEYUP and e.key == K_RIGHT:
                    right = False
                if e.type == KEYUP and e.key == K_LEFT:
                    left = False
                if e.type == KEYUP and e.key == K_RIGHT:
                    right = False
                    
            #---------Background----------
            for y in range(32):
                for x in range(32):
                    screen.blit(bg, (x * 32, y * 32))
            #------------------------------------

            #-------------Game Time----------------
            totseg  = start - (numFPS // FPS)
            if totseg < 0:
                totseg = 0
            minutes = totseg // 60
            seconds = totseg % 60
            outtext = "Time left:{0:02}:{1:00}".format(minutes,seconds)
            text = font.render(outtext, False, Yellow)
            screen.blit(text, [640, 4])
            #--------------------------------------------

            #-----------Player output-------------
            #ntx = font.render(nameout, False, Yellow)
            #screen.blit(ntx, [200, 4])
            pltemp = "Player: "
            ptem = font.render(pltemp, False, Yellow)
            screen.blit(ptem, [140, 4])
            #-------------------------------------------

            #-----Game Over-----
            if pygame.sprite.spritecollide(player,grenades, True):
                life -= 1
                if life == 0:
                    endgame = True
            #-------------------------

            #------------Sprites update and entities---------------
            player.update(up, down, left, right, platforms, ladders)
            objeC.update()

            for x in grenades:
                x.draw(screen)
                x.collision(platforms)
                x.movement()
                
            if time == 120:
                grenG = Grenade(100, 42)
                grenades.add(grenG)
                time = 0
            time += 1
            #grenades.update(platforms)

            entities.draw(screen)
            numFPS +=1
            if pygame.sprite.spritecollide(player,objeC,True):
                nextl = True

            pygame.display.update()
            #----------------------------------------------------------------

            while endgame == True:
                screen.fill(Black)
                tx1 ="GAME OVER"
                rt1 = font2.render(tx1, False, White)
                screen.blit(rt1, [20, 200])
                tx2 ="Pulse la tecla (h)\n para volver a empezar"
                rt2 = font3.render(tx2, False, White)
                screen.blit(rt2, [50, 400])
                pygame.display.update()
                for f in pygame.event.get():
                    if f.type == pygame.KEYDOWN and f.key == pygame.K_h:
                        main()
                    else:
                         pass
            while nextl == True:
                screen.fill(Black)
                tx3 ="YOU GOT IT!"
                rt3 = font2.render(tx3, False, White)
                screen.blit(rt3, [20, 200])
                tx4 ="Pulse la tecla (N)\n para volver a empezar"
                rt4 = font3.render(tx4, False, White)
                screen.blit(rt4, [50, 400])
                pygame.display.update()
                for f in pygame.event.get():
                    if f.type == pygame.KEYDOWN:
                        if f.key == pygame.K_n:
                            comenzar_l2()
                        else:
                            pass

    main()
##########################FINAL MAIN 1###############################

def comenzar_l2():
##########################INICIO MAIN 2####################################
    def main2():
        screen = pygame.display.set_mode(DISPLAY)
        pygame.display.set_caption("Donkey Kong: HALO Edition")
        timer = pygame.time.Clock()
        pygame.mixer.music.load("h8bitperil.wav")
        pygame.mixer.music.play(1)
        pygame.mixer.music.set_volume(.3)
        Yellow= (255,239,3)
        Black = (0,0,0)
        White = (255,255,255)

        numFPS = 0
        FPS = 60
        start  =150
        font = pygame.font.Font(None,25)                                #tx font and size

        tm = 0
        #------Name input-------
        #nameout = (input("Player name: "))
        #-----------------------------

        #--------GameOver txt---------------
        font2 = pygame.font.Font("halo.ttf",80)
        font3 = pygame.font.Font("halo.ttf",30)
        life = 1
        endgame = False
        #------------------------------------------
        

        up = down = left = right = False
        bg = Surface((32,32))
        bg.convert()
        bg.fill(Color("#000000"))
        entities = pygame.sprite.Group()
        player = Player(700, 640)
        
        
        enemy = Enemy(50, 48)
        obj = Objective(340, 28)
        grenades =pygame.sprite.Group()
        objeC = pygame.sprite.Group()
        platforms = []
        ladders = []

        x = y = 0
        level = [ 
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "peeeeeeeeeeeeeeeeeeeeeeep",
                  "pppppppppppppppdppppeeeep",  #1----
                  "peeeeceeeeeeeeedeeeeeeeep",
                  "peeeeeeeeeeeeeedeeeeeeeep",
                  "ppppppppppeeeeppppppppdpp",  #2----
                  "peeeeeeceeeeeeeeeeeeeedep",
                  "peeeeeeeeeeeeeeeeeeeeedep",
                  "pdpppeeeeppppppeeeepppppp",  #3----
                  "pdeeeeeeeeeeeceeeeeeeeeep",
                  "pdeeeeeeeeeeeeeeeeeeeeeep",
                  "pppppppppdpppppeeeeeeeeep",  #4----
                  "peeeeeeeedeeeeeeeeeeeeeep",
                  "peeeeeeeedeeeeeeeeeeeeeep",
                  "ppppeeeepppppppppdeeppppp",  #5----
                  "peeeeeeeceeeeeeeedeeeeeep",
                  "peeeeeeeeeeeeeeeedeeeeeep",  
                  "ppppppdpeeeeeeeeepppppppp",  #6----
                  "peeeeedeeeeeeeeeeeceeeeep",
                  "peeeeedeeeeeeeeeeeeeeeeep",
                  "ppppppppppppppppppppppppp",  #Base
            ]
        
        #----------------Level builder-----------------
        for row in level:
            for col in row:
                if col == "p":
                    p = Platform(x, y)
                    platforms.append(p)
                    entities.add(p)
                if col == 'd':
                    d = Ladder(x, y)
                    ladders.append(d)
                    entities.add(d)
                if col == 'c':
                    c = LadBroken(x, y)
                    entities.add(c)
                x += 32
            y += 32
            x = 0
        #---------------------------------------------------

        entities.add(player, enemy, obj)
        
        time = 0
                
        while 1:
            timer.tick(60)
            lefter = True
            righter = True
            for e in pygame.event.get():
                if e.type == QUIT: pygame.quit()
                if e.type == KEYDOWN and e.key == K_UP:
                    up = True
                if e.type == KEYDOWN and e.key == K_DOWN:
                    down = True
                if e.type == KEYDOWN and e.key == K_LEFT:
                    left = True
                if e.type == KEYDOWN and e.key == K_RIGHT:
                    right = True
                #if e.type == KEYDOWN and e.key == K_SPACE:
                    

                if e.type == KEYUP and e.key == K_UP:
                    up = False
                if e.type == KEYUP and e.key == K_DOWN:
                    down = False
                if e.type == KEYUP and e.key == K_RIGHT:
                    right = False
                if e.type == KEYUP and e.key == K_LEFT:
                    left = False
                if e.type == KEYUP and e.key == K_RIGHT:
                    right = False
                    
            #---------Background----------
            for y in range(32):
                for x in range(32):
                    screen.blit(bg, (x * 32, y * 32))
            #------------------------------------

            #-------------Game Time----------------
            totseg  = start - (numFPS // FPS)
            if totseg < 0:
                totseg = 0
            minutes = totseg // 60
            seconds = totseg % 60
            outtext = "Time left:{0:02}:{1:00}".format(minutes,seconds)
            text = font.render(outtext, False, Yellow)
            screen.blit(text, [640, 4])
            #--------------------------------------------

            #-----------Player output-------------
            #ntx = font.render(nameout, False, Yellow)
            #screen.blit(ntx, [200, 4])
            pltemp = "Player: "
            ptem = font.render(pltemp, False, Yellow)
            screen.blit(ptem, [140, 4])
            #-------------------------------------------

            #-----Game Over-----
            if pygame.sprite.spritecollide(player,grenades, True):
                life -= 1
                if life == 0:
                    endgame = True
            #-------------------------

            #------------Sprites update and entities---------------
            player.update(up, down, left, right, platforms, ladders)
            #gren.update(platforms)
            #grenades.render()

            for x in grenades:
                x.draw(screen)
                x.collision(platforms)
                x.movement()
                
            if time == 60:
                grenG = Grenade(100, 42)
                grenades.add(grenG)
                time = 0
            time += 1
            #grenades.update(platforms)

            entities.draw(screen)
            numFPS +=1
            pygame.display.update()
            #----------------------------------------------------------------
            while endgame == True:
                screen.fill(Black)
                tx1 ="GAME OVER"
                rt1 = font2.render(tx1, False, White)
                screen.blit(rt1, [20, 200])
                tx2 ="Pulse la tecla (h)\n para volver a empezar"
                rt2 = font3.render(tx2, False, White)
                screen.blit(rt2, [50, 400])
                pygame.display.update()
                for f in pygame.event.get():
                    if f.type == pygame.KEYDOWN and f.key == pygame.K_h:
                        main2()
                    else:
                         pass
    main2()

def mostrar_opciones():
    print ("Hola \n El juego Donkey Kong: HALO Edition esta creado especialmente\
    para el entretenimiento de todos. El objetivo es hacer que nuestro personaje, el Jefe Maestro, llegue hasta la moneda Forerunner en la cima de cada nivel,\ pero cuidado porque el Elite lanza granadas para impedir tu objetivo;\
usa las flechas para controlar el movimiento del Jefe y la barra espaciadora para disparar a las granadas. Suerte.\n\n\
    Hi\nThe game Donkey Kong: HALO Edition is created especially for the entertaining of everybody. The objective is to make our character, the Master Chief,\
get to the Forerunner coin on the top of each level, but be careful because the elite\
    throws grenades to prevent your goal; use the arrow keys to control Chief’s movement\
and the spacebar to shoot at the grenades. Good luck.")

def creditos():
    print ("\n Donkey Kong: HALO Edition \n Elaborado por: Diego Felipe Galarza Chamorro \n Estudiante de Ingenieria de Sistemas, primer semestre\n Pontificia Universidad Javeriana\n Año 2015")

def salir_del_programa():
    import sys
    print (" Gracias por jugar Donkey Kong: HALO Edition.")
    sys.exit(1)
    pygame.quit()
#############################FINAL MAIN 2############################

if __name__ == '__main__':
    
    salir = False
    opciones = [
        ("Jugar nivel 1", comenzar_nuevo_juego),
        ("Jugar nivel 2", comenzar_l2),
        ("Como jugar", mostrar_opciones),
        ("Creditos", creditos),
        ("Salir", salir_del_programa)
        ]

    pygame.font.init()
    screen = pygame.display.set_mode((400, 400))
    fondo = pygame.image.load("gameinitDEF.png").convert()
    menu = Menu(opciones)

    while not salir:

        for e in pygame.event.get():
            if e.type == QUIT:
                salir = True

        screen.blit(fondo, (0, 0))
        menu.actualizar()
        menu.imprimir(screen)

        pygame.display.flip()
        pygame.time.delay(10)

    


pygame.quit()

